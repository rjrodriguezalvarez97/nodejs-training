nodejs-training-root:
  build:
    context: .
    dockerfile: Dockerfile
    # encrypted_args_file: ci.args.encrypted
    image: nodejs-training-root
    args:
      COMMIT_ID: "{{.CommitID}}"
    entrypoint: "/bin/sh"
    environment:
      NODE_ENV: development
  cached: true
  default_cache_branch: "main"

nodejs-training:
  build:
    context: .
    dockerfile: Dockerfile.user
    # encrypted_args_file: ci.args.encrypted
    args:
      COMMIT_ID: "{{.CommitID}}"
  entrypoint: "/bin/sh"
  environment:
    # HQ_PLACEMENTS_DATABASE_HOST: postgres
    # HQ_PLACEMENTS_DATABASE_USERNAME: postgres
    # HQ_PLACEMENTS_DATABASE_PASSWORD: postgres
  #   RAILS_ENV: test
  #   REDIS_URL: redis://redis
  #   PARALLEL_TEST_GROUPS: FullSuite
  #   TEST_ENV_NUMBER: 1
  #   COVERAGE: 1
  #   CI: 1
  # depends_on:
  #   - postgres
  cached: true
  default_cache_branch: "main"
dockercfg-staging-generator:
  image: codeship/aws-ecr-dockercfg-generator
  add_docker: true
  encrypted_env_file: ci.env.encrypted
  environment:
    - AWS_STS_ROLE=ci_from_ops
    - AWS_STS_ACCOUNT=215866266283

awsdeployment-staging:
  image: 215866266283.dkr.ecr.eu-west-1.amazonaws.com/ci-stuff
  dockercfg_service: dockercfg-staging-generator
  encrypted_env_file: ci.env.encrypted
  volumes:
    - ./public/packs:/packs
  environment:
    - AWS_DEFAULT_REGION=eu-west-1
    - CUSTOM_SERVICE_NAME=hq-placements
    - AWS_STS_ROLE=ci_from_ops
    - AWS_STS_ACCOUNT=215866266283
    - AWS_ROLE_ARN=arn:aws:iam::215866266283:role/ci_from_ops

dockercfg-production-generator:
  image: codeship/aws-ecr-dockercfg-generator
  add_docker: true
  encrypted_env_file: ci.env.encrypted
  environment:
    - AWS_STS_ROLE=ci_from_ops
    - AWS_STS_ACCOUNT=471410223680
